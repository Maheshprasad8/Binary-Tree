Given the root of a binary tree, determine if it is a complete binary tree.

In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible.
It can have between 1 and 2h nodes inclusive at the last level h.
............................................................................................................

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
int countNode(TreeNode* root){
    
    if(root==NULL){
        return 0;
    }
    return 1+countNode(root->left)+countNode(root->right);
}

bool dfs(TreeNode* root,int i,int totalnode){
    if(root==NULL){
        return true;
    }
    if(i>totalnode){
        return false;
    }
return dfs(root->left,2*i,totalnode) &&
       dfs(root->right,2*i+1,totalnode);
}
    bool isCompleteTree(TreeNode* root) {
        // Using BFS
        // queue<TreeNode*> q;
        // q.push(root);
        // bool past = false; // past mai koi null node dekha hai
        // while (!q.empty()) {
        //     TreeNode* node = q.front();
        //     q.pop();
        //     if (node == NULL) {
        //         past = true;
        //     }else{
        //     if (past == true) {
        //         return false;
        //     }
        //     q.push(node->left);
        //     q.push(node->right);
        // }
        // }
        // return true;

        // Using DFS
        int totalnode=countNode(root);
        int i=1;
        return dfs(root,i,totalnode);
    }
};
 
