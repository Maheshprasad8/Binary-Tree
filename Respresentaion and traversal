#include<iostream>
#include<queue>
using namespace std;
class node{
    public:
    int data;
    node *left;
    node *right;
node(int d){
    this->data=d;
    this->left=NULL;
    this->right=NULL;
}
};
node* buildTree(node* root){
cout<<"enter the data"<<endl;
int data;
cin>>data;
root=new node(data);
if(data==-1)
return NULL;
cout<<"enter data for inserting left  "<<data<<endl;
root->left=buildTree(root->left);
cout<<"enter data for inserting right  "<<data<<endl;
root->right=buildTree(root->right);
return root;
}

void levelOrderTraversal(node* root){
queue<node*>q;
q.push(root);
q.push(NULL);
while(!q.empty()){
    node* temp=q.front(); 
    q.pop();
    if(temp==NULL){  //purana level complete traversal ho chuka hai
    cout<<endl;
    if(!q.empty()){     //queue ha still child
        q.push(NULL);
    }
    }

else{ 
    
    cout<< temp->data <<" ";
    if(temp->left){
    q.push(temp->left);
    }
 if(temp->right){
    q.push(temp->right);
}
}
}
}

//Tree Traversal
//inorder LNR
//preorder NLR
//postorder LRN

void inorder(node* root){
    if(root==NULL){
    return ;
    }
   inorder(root->left);
   cout<<root->data<<" ";
   inorder(root->right); 
}

void preorder(node* root){
    if(root==NULL){
    return ;
    }
    cout<<root->data<<" ";
   preorder(root->left);
   preorder(root->right); 
}

void postorder(node* root){
    if(root==NULL){
    return ;
    }
   
   postorder(root->left);
   postorder(root->right); 
    cout<<root->data<<" ";
}
void buildLevelorder(node* &root){
queue<node*>q;
cout<<"enter the data"<<endl;
int data;
cin>>data;
root=new node(data);
q.push(root);
while(!q.empty()){
    node* temp=q.front();
    q.pop();

cout<<"enter the left node for"<<temp->data<<endl;
int leftData;
cin>>leftData;

if(leftData!=-1){
temp->left=new node(leftData);
q.push(temp->left);
}
cout<<"enter the right node for"<<temp->data<<endl;
int rightData;
cin>>rightData;

if(rightData!=-1){
temp->right=new node(rightData);
q.push(temp->right);

}

}
}
int main(){
node* root=NULL;
// root = buildTree(root);
// //1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1 
// cout<<"printing level order : "<<endl;
// levelOrderTraversal(root);
// cout<<"inorder traversal of tree : "<<endl;
// inorder(root);

// cout<<"preoder traversal of tree : "<<endl;
// preorder(root);

// cout<<"postorder traversal of tree :   "<<endl;
// postorder(root);
buildLevelorder(root);
levelOrderTraversal(root);
cout<<"Inorder traversal"<<endl;
inorder(root);
return 0;
}
