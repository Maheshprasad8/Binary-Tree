Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and 
postorder is the postorder traversal of the same tree, construct and return the binary tree.

Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]
.....................................................................................


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void createMapping(vector<int>& inorder,map<int,int>&nodeToIndex,int n){
    for(int i=0;i<n;i++){
        nodeToIndex[inorder[i]]=i;
    }
}

TreeNode* solve(vector<int>& inorder,vector<int>& postorder,int &Index,int inorderStart,
int inorderEnd,int n,map<int,int>&nodeToIndex){
    if(Index < 0 || inorderStart > inorderEnd){
        return NULL;
    }
    int element=postorder[Index--];
     TreeNode* root=new TreeNode(element);
     int postion=nodeToIndex[element];
      root->right=solve(inorder,postorder,Index,postion+1,inorderEnd,n,nodeToIndex);
    
     root->left=solve(inorder,postorder,Index,inorderStart,postion-1,n,nodeToIndex);
     return root;
}
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
     int n=inorder.size();

     int postorderIndex=n-1;   
     map<int,int>nodeToIndex;
     createMapping(inorder,nodeToIndex,n);
     TreeNode* ans=solve(inorder,postorder,postorderIndex,0,n-1,n,nodeToIndex);
     return ans;
    }
};
