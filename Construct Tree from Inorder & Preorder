Given two arrays representing the inorder and preorder traversals of a binary tree, construct the tree and return the root node of the constructed tree.

Note: The output is written in postorder traversal.


.........................................................
class Solution {
  public:
  int findPos(vector<int>&in,int element,int n){
    for(int i=0;i<n;i++){
        if(in[i]==element){
            return i;
        }
    }  
    return -1;
  }
  
  Node* solve(vector<int>&in,vector<int> &pre,int &index,int inorderStart,
  int inorderEnd,int n){
      if(index>=n || inorderStart>inorderEnd){
          return NULL;
      }
      
      int element=pre[index++];
      Node* root=new Node(element);
      int position=findPos(in,element,n);
      root->left=solve(in,pre,index,inorderStart,position-1,n);
      root->right=solve(in,pre,index,position+1,inorderEnd,n);
      return root;
  }
    // Function to build the tree from given inorder and preorder traversals
    Node *buildTree(vector<int> &inorder, vector<int> &preorder) {
       int n=inorder.size();
       int preOrderIndex=0;
       Node* ans=solve(inorder,preorder,preOrderIndex,0,n-1,n);
       
       return ans;
    }
};
