Given a binary tree, return an array where elements represent the bottom view of the binary tree from left to right.

Note: If there are multiple bottom-most nodes for a horizontal distance from the root, then the latter one in the level traversal is considered.
For example, in the below diagram, 3 and 4 are both the bottommost nodes at a horizontal distance of 0, here 4 will be considered.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree, the output should be 5 10 4 14 25.


............................................................



class Solution {
  public:
    vector <int> bottomView(Node *root) {
        vector<int>ans;
        map<int,int>mp;
        if(root==NULL){
            return ans;
        }
        queue<pair<Node* ,int>>q;
        q.push(make_pair(root,0));
        while(!q.empty()){
            pair<Node* ,int>temp=q.front();
            q.pop();
            Node* frontNode=temp.first;
            int hd=temp.second;
           
                mp[hd]=frontNode->data;
                if(frontNode->left){
                    q.push(make_pair(frontNode->left,hd-1));
                }
                if(frontNode->right){
                    q.push(make_pair(frontNode->right,hd+1));
                // }
            }
        }
        for(auto i:mp){
            ans.push_back(i.second);
        }
        return ans;
    }
};
