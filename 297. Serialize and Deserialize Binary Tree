Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, 
or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. 
You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

 ........................................................................

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:
void solve1(TreeNode* root,string& s){
    if(root==NULL){
        s+="#,";
        return;
    }
s+=to_string(root->val)+",";
solve1(root->left,s);
solve1(root->right,s);
}
TreeNode* solve2(istringstream& ss){
    string val;
    if(!getline(ss,val,',')){
        return NULL;
    }
    if(val=="#"){
        return NULL;
    }
    TreeNode* root=new TreeNode(stoi(val));
    root->left=solve2(ss);
    root->right=solve2(ss);
    return root;
}

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string s="";
        solve1(root,s);
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
       istringstream ss(data);
       return solve2(ss);
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
